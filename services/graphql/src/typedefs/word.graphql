type FrequencyListWord {
  id: ID!
  info: JSON!
  jlpt: String
  frequency: Int!
  ignored: Boolean!
}

type GlossaryWord {
  id: ID!
  info: JSON!
  jlpt: String
  frequency: Int!
  ignored: Boolean!
  volumeNumber: Int
  pageNumber: Int!
  sentenceNumber: Int!
  entryNumber: Int!
  componentNumber: Int
}

type KnownWord {
  id: ID!
  info: JSON!
  jlpt: String
}

type ExcludedWord {
  id: ID!
  info: JSON!
  jlpt: String
}

type RecommendedWord {
  id: ID!
  info: JSON!
  jlpt: String
  frequency: Int!
}

input CorpusScopedInput {
  limit: Int
  offset: Int
  searchString: String
}

input FrequencyListInput {
  """
  If true, seriesId must be supplied.
  """
  isPartOfSeries: Boolean
  """
  If true, seriesId must be supplied; if false, isPartOfSeries and workId must be supplied.
  """
  isSeries: Boolean!
  limit: Int
  offset: Int
  seriesId: String
  searchString: String
  workId: String
}

input GlossaryInput {
  """
  If true, seriesId must be supplied.
  """
  isPartOfSeries: Boolean
  """
  If true, seriesId must be supplied; if false, isPartOfSeries and workId must be supplied.
  """
  isSeries: Boolean!
  limit: Int
  minPageNumber: Int
  minVolumeNumber: Int
  offset: Int
  searchString: String
  seriesId: String
  workId: String
}

extend type Query {
  excludedWords(input: CorpusScopedInput): [ExcludedWord!]!
  frequencyList(input: FrequencyListInput!): [FrequencyListWord!]!
  glossary(input: GlossaryInput!): [GlossaryWord!]!
  knownWords(input: CorpusScopedInput): [KnownWord!]!
  recommendedWords(input: CorpusScopedInput): [RecommendedWord!]!
}

type UpdateWordStatusResponse {
  code: Int!
  success: Boolean!
  message: String!
}

input UpdateExcludedStatusInput {
  id: ID!
  excluded: Boolean!
}

input UpdateIgnoredStatusInput {
  id: ID!
  ignored: Boolean!
  """
  A value must be supplied for either seriesIdInWhichIgnored or workIdInWhichIgnored.
  """
  seriesIdInWhichIgnored: String
  """
  A value must be supplied for either seriesIdInWhichIgnored or workIdInWhichIgnored.
  """
  workIdInWhichIgnored: String
}

input UpdateKnownStatusInput {
  id: ID!
  known: Boolean!
}

extend type Mutation {
  updateExcludedStatus(
    input: UpdateExcludedStatusInput!
  ): UpdateWordStatusResponse!
  updateIgnoredStatus(
    input: UpdateIgnoredStatusInput!
  ): UpdateWordStatusResponse!
  updateKnownStatus(input: UpdateKnownStatusInput!): UpdateWordStatusResponse!
}
