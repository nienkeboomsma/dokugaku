scalar JSON

input AuthorInput {
  authorId: String!
}

input AuthorListInput {
  authorIds: [String!]
}

input SeriesInput {
  seriesId: String!
  """
  If no userId value is supplied 'status' will default to null.
  """
  userId: String
}

input SeriesListInput {
  seriesIds: [String!]
  """
  If no userId value is supplied 'status' will default to null.
  """
  userId: String
}

input WordInput {
  """
  Determines what series the 'ignored' value should be based on. If no
  seriesIdInWhichIgnored or workIdInWhichIgnored value is supplied 'ignored'
  will default to null.
  """
  seriesIdInWhichIgnored: String
  """
  If no userId value is supplied 'excluded', 'ignored' and 'known' will default
  to null.
  """
  userId: String
  wordId: Int!
  """
  Determines what work the 'ignored' value should be based on. If no
  workIdInWhichIgnored or seriesIdInWhichIgnored value is supplied 'ignored'
  will default to null.
  """
  workIdInWhichIgnored: String
  """
  If no workIds value is supplied information will be drawn from the entire
  corpus. Filtering by workIds is most useful for works within the same series;
  combining random works will yield uninformative values for
  'volumeNumber', 'pageNumber', 'sentenceNumber', 'entryNumber' and
  'componentNumber'.
  """
  workIds: [String!]
}

input WordListInput {
  """
  Get only the first occurrence of each word, instead of each individual
  occurrence.
  """
  distinctOnly: Boolean
  # excluded: Boolean   WIP
  # known: Boolean   WIP
  ignored: Boolean
  # minFrequency: Int   WIP
  # minPageNumber: Int   WIP
  # pageNumber: Int   WIP
  """
  Determines what series the 'ignored' value should be based on. If no
  seriesIdInWhichIgnored or workIdInWhichIgnored value is supplied 'ignored'
  will default to null.
  """
  seriesIdInWhichIgnored: String
  """
  If no userId value is supplied 'excluded', 'ignored' and 'known' will default
  to null.
  """
  userId: String
  wordIds: [Int!]
  """
  Determines what work the 'ignored' value should be based on. If no
  workIdInWhichIgnored or seriesIdInWhichIgnored value is supplied 'ignored'
  will default to null.
  """
  workIdInWhichIgnored: String
  """
  If no workIds value is supplied information will be drawn from the entire
  corpus. Filtering by workIds is most useful for works within the same series;
  combining random works will yield uninformative values for
  'volumeNumber', 'pageNumber', 'sentenceNumber', 'entryNumber' and
  'componentNumber'.
  """
  workIds: [String!]
}

input WorkInput {
  """
  Get only those works that are not part of a series.
  """
  excludeVolumesInSeries: Boolean
  """
  If no userId value is supplied 'progress' and 'status' will default to null.
  """
  userId: String
  workId: String!
}

input WorkListInput {
  """
  Get only those works that are not part of a series.
  """
  excludeVolumesInSeries: Boolean
  """
  If no userId value is supplied 'progress' and 'status' will default to null.
  """
  userId: String
  workIds: [String!]
}

type Query {
  author(input: AuthorInput!): Author
  authorList(input: AuthorListInput): [Author]!
  series(input: SeriesInput!): Series
  seriesList(input: SeriesListInput): [Series]!
  word(input: WordInput!): Word
  wordList(input: WordListInput): [Word]!
  work(input: WorkInput!): Work
  workList(input: WorkListInput): [Work]!
}

type Mutation {
  updateReadStatus: SetReadStatusResponse!
  updateWord: WordChangeResponse!
}

type SetReadStatusResponse {
  code: Int!
  success: Boolean!
  message: String
  readStatus: ReadStatus
}

type WordChangeResponse {
  code: Int!
  success: Boolean!
  message: String
  wordId: String
}

union Media = Series | Work

enum ReadStatus {
  NONE
  WANT_TO_READ
  READING
  READ
  ABANDONED
}

enum WorkType {
  MANGA
  NOVEL
}

type Author {
  id: ID!
  name: String!
}

type Series {
  id: ID!
  authors: [Author!]!
  status: ReadStatus
  title: String!
  vocab: [Word!]!
  volumes(userId: String): [Work!]!
}

type Work {
  authors: [Author!]!
  id: ID!
  maxProgress: Int!
  numberInSeries: Int
  progress: Int
  series(userId: String): Series
  status: ReadStatus
  title: String!
  type: WorkType!
  vocab: [Word!]!
}

type Word {
  id: ID!
  info: JSON!
  known: Boolean
  ignored: Boolean
  excluded: Boolean
  frequency: Int
  volumeNumber: Int
  pageNumber: Int
  sentenceNumber: Int
  entryNumber: Int
  componentNumber: Int
}
