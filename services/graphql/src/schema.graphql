input AuthorInput {
  id: String!
}

type Query {
  author(input: AuthorInput!): Author
  authorList: [Author]!
  series: Series
  seriesList: [Series]!
  work: Work
  workList: [Work]!
  word: Word
  wordList: [Word]!
}

type Mutation {
  updateReadStatus: SetReadStatusResponse!
  updateWord: WordChangeResponse!
}

type SetReadStatusResponse {
  code: Int!
  success: Boolean!
  message: String
  readStatus: ReadStatus
}

type WordChangeResponse {
  code: Int!
  success: Boolean!
  message: String
  wordId: String
}

union Media = Series | Work

enum ReadStatus {
  WANT_TO_READ
  READING
  READ
  ABANDONED
}

enum WorkType {
  MANGA
  NOVEL
}

type Author {
  id: ID!
  name: String!
}

type Series {
  id: ID!
  status: ReadStatus!
  title: String!
  volumes: [Work!]!
  vocab: [Word!]!
}

type Work {
  authors: [Author!]!
  id: ID!
  maxProgress: Int!
  numberInSeries: Int
  progress: Int
  status: ReadStatus!
  title: String!
  type: WorkType!
  vocab: [Word!]!
}

type Word {
  id: ID!
  info: String!
  known: Boolean!
  ignored: Boolean!
  excluded: Boolean!
  frequency: Int
  volumeNumber: Int
  pageNumber: Int!
  sentenceNumber: Int!
  entryNumber: Int!
  componentNumber: Int
}
