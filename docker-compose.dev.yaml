services:
  db:
    container_name: db
    build:
      args:
        DB_JMDICT: https://github.com/scriptin/jmdict-simplified/releases/download/3.5.0%2B20240311121612/jmdict-eng-3.5.0+20240311121612.json.zip
      context: .
      dockerfile: ./services/db/Dockerfile
    environment:
      PGDATA: '/var/lib/postgresql/data/pgdata'
      POSTGRES_DB: db
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=ja_JP.utf8 --lc-ctype=ja_JP.utf8'
      POSTGRES_PASSWORD: ${DB_PG_PASSWORD}
    healthcheck:
      test: pg_isready -h db || exit 1
      interval: 15s
      timeout: 30s
      retries: 999999
      start_period: 10s
    networks:
      - backend
    restart: always
    shm_size: 1gb
    volumes:
      - db:/var/lib/postgresql/data
  graphql:
    container_name: graphql
    build:
      context: .
      dockerfile: ./services/graphql/Dockerfile
    command: npm run dev
    environment:
      ALLOW_OTHER_DEVICES: ${ALLOW_OTHER_DEVICES}
      GRAPHQL_PORT: ${GRAPHQL_PORT}
      POSTGRES_PASSWORD: ${DB_PG_PASSWORD}
    networks:
      - backend
    ports:
      - '${GRAPHQL_PORT}:${GRAPHQL_PORT}'
    restart: always
    volumes:
      - ./services/graphql/src:/app/services/graphql/src
  ichiran:
    container_name: ichiran
    build:
      context: .
      dockerfile: ./services/ichiran/docker/ichiran/Dockerfile
    command: >
      sh -c "
      sh init.sh &&
      npm run dev
      "
    depends_on:
      ichiran-db:
        condition: service_healthy
        restart: true
    environment:
      ICHIRAN_PORT: ${ICHIRAN_PORT}
      POSTGRES_PASSWORD: ${ICHIRAN_PG_PASSWORD}
    networks:
      - backend
      - ichiran
    expose:
      - '${ICHIRAN_PORT}'
    restart: always
    volumes:
      - ./services/ichiran/src:/app/services/ichiran/src
  ichiran-db:
    container_name: ichiran-db
    build:
      args:
        ICHIRAN_PGDUMP: https://github.com/tshatrov/ichiran/releases/download/ichiran-240107/jmdict-070124.pgdump
      context: .
      dockerfile: ./services/ichiran/docker/ichiran-db/Dockerfile
    environment:
      PGDATA: '/var/lib/postgresql/data/pgdata'
      POSTGRES_PASSWORD: ${ICHIRAN_PG_PASSWORD}
    healthcheck:
      test: pg_isready -h ichiran-db || exit 1
      interval: 30s
      timeout: 30s
      retries: 999999
      start_period: 30s
    networks:
      - ichiran
    restart: always
    shm_size: 1gb
    volumes:
      - ichiran-db:/var/lib/postgresql/data
  mokuro:
    container_name: mokuro
    build:
      context: .
      dockerfile: ./services/mokuro/Dockerfile
    command: npm run dev
    environment:
      MOKURO_PORT: ${MOKURO_PORT}
    networks:
      - backend
    expose:
      - '${MOKURO_PORT}'
    privileged: true
    restart: always
    volumes:
      - files:/dokugaku
      - ./services/mokuro/src:/app/services/mokuro/src
  web:
    container_name: web
    build:
      args:
        NEXT_PUBLIC_ALLOW_OTHER_DEVICES: ${ALLOW_OTHER_DEVICES}
        NEXT_PUBLIC_GRAPHQL_PORT: ${GRAPHQL_PORT}
        NEXT_PUBLIC_HOST_IP: ${HOST_IP}
        NEXT_PUBLIC_WORK_PROCESSOR_PORT: ${WORK_PROCESSOR_PORT}
        WEB_PORT: ${WEB_PORT}
      context: .
      dockerfile: ./apps/web/Dockerfile.dev
    networks:
      - backend
    ports:
      - '${WEB_PORT}:${WEB_PORT}'
    privileged: true
    restart: always
    volumes:
      - files:/dokugaku
      - ./apps/web/src:/app/apps/web/src
  work-processor:
    container_name: work-processor
    build:
      context: .
      dockerfile: ./services/work-processor/Dockerfile
    command: npm run dev
    environment:
      ALLOW_OTHER_DEVICES: ${ALLOW_OTHER_DEVICES}
      ICHIRAN_PORT: ${ICHIRAN_PORT}
      MOKURO_PORT: ${MOKURO_PORT}
      POSTGRES_PASSWORD: ${DB_PG_PASSWORD}
      WORK_PROCESSOR_PORT: ${WORK_PROCESSOR_PORT}
    networks:
      - backend
    ports:
      - '${WORK_PROCESSOR_PORT}:${WORK_PROCESSOR_PORT}'
    privileged: true
    restart: always
    volumes:
      - files:/dokugaku
      - ./services/work-processor/src:/app/services/work-processor/src

networks:
  backend:
  ichiran:

volumes:
  db:
  files:
  ichiran-db:
